{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///Users/tgrossman/Desktop/FirebaseProject/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI({apiKey: process.env.GEMINI_API_KEY})],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD,EAAE;YAAC,QAAQ,QAAQ,GAAG,CAAC,cAAc;QAAA;KAAG;IACzD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///Users/tgrossman/Desktop/FirebaseProject/src/ai/flows/generate-coloring-book-images.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Converts multiple user-uploaded photos into coloring book pages using AI.\n *\n * - generateColoringBookImages - A function that handles the bulk image conversion to coloring book pages.\n * - GenerateColoringBookImagesInput - The input type for the generateColoringBookImages function.\n * - GenerateColoringBookImagesOutput - The return type for the generateColoringBookImages function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateColoringBookImagesInputSchema = z.object({\n  photoDataUris: z\n    .array(z.string())\n    .describe(\n      \"An array of photos, as data URIs that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  style: z.enum(['outline', 'realistic']).optional().default('outline').describe(\"The artistic style for the coloring page.\"),\n  difficulty: z.number().min(1).max(5).optional().default(3).describe(\"The complexity of the coloring page, from 1 (simple) to 5 (complex).\"),\n});\nexport type GenerateColoringBookImagesInput = z.infer<typeof GenerateColoringBookImagesInputSchema>;\n\nconst GenerateColoringBookImagesOutputSchema = z.object({\n  coloringBookDataUris: z\n    .array(z.string())\n    .describe(\"An array of coloring book page images, as data URIs.\"),\n});\nexport type GenerateColoringBookImagesOutput = z.infer<typeof GenerateColoringBookImagesOutputSchema>;\n\nexport async function generateColoringBookImages(\n  input: GenerateColoringBookImagesInput\n): Promise<GenerateColoringBookImagesOutput> {\n  return generateColoringBookImagesFlow(input);\n}\n\nconst coloringBookPrompt = ai.definePrompt({\n  name: 'coloringBookPrompt',\n  input: {schema: z.object({photoDataUri: z.string(), isRealistic: z.boolean(), difficultyDescription: z.string()})},\n  prompt: `\n    You are a coloring book image generator. Your task is to convert the user's photo into a coloring book page based on the specified style and difficulty.\n    The output should always be a data URI representing a PNG image. The output MUST be a coloring book version of the provided photo. Do NOT change the subject matter.\n\n    Style:\n    {{#if isRealistic}}\n    - Convert the image into a realistic, grayscale coloring book page. The image must be grayscale with no color.\n    - Preserve shading and detail to create an image that looks like a photograph, but is suitable for coloring.\n    {{else}}\n    - Convert the image into a classic coloring book page with only black and white.\n    - The result should be a black and white line drawing with clear, bold outlines and absolutely no color or shading. The image must contain only black lines on a white background.\n    {{/if}}\n\n    Difficulty:\n    - The user has specified the difficulty as '{{difficultyDescription}}'.\n    - Adjust the level of detail in the final image to match this difficulty.\n\n    Photo:\n    {{media url=photoDataUri}}`,\n  model: 'googleai/gemini-2.5-flash-image-preview',\n  config: {\n    responseModalities: ['IMAGE'],\n  },\n});\n\nconst generateColoringBookImagesFlow = ai.defineFlow(\n  {\n    name: 'generateColoringBookImagesFlow',\n    inputSchema: GenerateColoringBookImagesInputSchema,\n    outputSchema: GenerateColoringBookImagesOutputSchema,\n  },\n  async input => {\n    const isRealistic = input.style === 'realistic';\n    const difficultyMap: Record<number, string> = {\n        1: 'very easy (minimal lines, very simple)',\n        2: 'easy (simple with basic details)',\n        3: 'normal (moderately detailed)',\n        4: 'difficult (highly detailed with intricate lines)',\n        5: 'very difficult (as detailed as possible, capturing every fine line)',\n    };\n    const difficultyDescription = difficultyMap[input.difficulty || 3];\n\n\n    const conversionPromises = input.photoDataUris.map(photoDataUri => \n      coloringBookPrompt({ photoDataUri, isRealistic, difficultyDescription })\n    );\n\n    const results = await Promise.all(conversionPromises);\n\n    const coloringBookDataUris = results.map(result => {\n        if (!result.media.url) {\n            throw new Error(\"AI conversion failed for one or more images.\");\n        }\n        return result.media.url;\n    });\n\n    return {coloringBookDataUris};\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,eAAe,uIAAA,CAAA,IAAC,CACb,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;IAEJ,OAAO,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAY,EAAE,QAAQ,GAAG,OAAO,CAAC,WAAW,QAAQ,CAAC;IAC/E,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,GAAG,OAAO,CAAC,GAAG,QAAQ,CAAC;AACtE;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,sBAAsB,uIAAA,CAAA,IAAC,CACpB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd;AAGO,eAAe,2BACpB,KAAsC;IAEtC,OAAO,+BAA+B;AACxC;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACzC,MAAM;IACN,OAAO;QAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;YAAI,aAAa,uIAAA,CAAA,IAAC,CAAC,OAAO;YAAI,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAE;IAAE;IACjH,QAAQ,CAAC;;;;;;;;;;;;;;;;;;8BAkBmB,CAAC;IAC7B,OAAO;IACP,QAAQ;QACN,oBAAoB;YAAC;SAAQ;IAC/B;AACF;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,cAAc,MAAM,KAAK,KAAK;IACpC,MAAM,gBAAwC;QAC1C,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;IACP;IACA,MAAM,wBAAwB,aAAa,CAAC,MAAM,UAAU,IAAI,EAAE;IAGlE,MAAM,qBAAqB,MAAM,aAAa,CAAC,GAAG,CAAC,CAAA,eACjD,mBAAmB;YAAE;YAAc;YAAa;QAAsB;IAGxE,MAAM,UAAU,MAAM,QAAQ,GAAG,CAAC;IAElC,MAAM,uBAAuB,QAAQ,GAAG,CAAC,CAAA;QACrC,IAAI,CAAC,OAAO,KAAK,CAAC,GAAG,EAAE;YACnB,MAAM,IAAI,MAAM;QACpB;QACA,OAAO,OAAO,KAAK,CAAC,GAAG;IAC3B;IAEA,OAAO;QAAC;IAAoB;AAC9B;;;IAlEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":["file:///Users/tgrossman/Desktop/FirebaseProject/src/ai/flows/regenerate-individual-image.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for regenerating individual images in a coloring book.\n *\n * It includes:\n * - regenerateIndividualImage: An async function that takes an image data URI and regenerates it into a coloring book image.\n * - RegenerateIndividualImageInput: The input type for the regenerateIndividualImage function.\n * - RegenerateIndividualImageOutput: The output type for the regenerateIndividualImage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst RegenerateIndividualImageInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo to regenerate as a coloring book image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n    style: z.enum(['outline', 'realistic']).optional().default('outline').describe(\"The artistic style for the coloring page.\"),\n    difficulty: z.number().min(1).max(5).optional().default(3).describe(\"The complexity of the coloring page, from 1 (simple) to 5 (complex).\"),\n    userNotes: z.string().optional().describe(\"Optional user notes to guide the regeneration.\"),\n});\nexport type RegenerateIndividualImageInput = z.infer<typeof RegenerateIndividualImageInputSchema>;\n\nconst RegenerateIndividualImageOutputSchema = z.object({\n  regeneratedPhotoDataUri: z\n    .string()\n    .describe(\n      \"The regenerated coloring book image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type RegenerateIndividualImageOutput = z.infer<typeof RegenerateIndividualImageOutputSchema>;\n\nexport async function regenerateIndividualImage(\n  input: RegenerateIndividualImageInput\n): Promise<RegenerateIndividualImageOutput> {\n  return regenerateIndividualImageFlow(input);\n}\n\nconst regenerateIndividualImagePrompt = ai.definePrompt({\n  name: 'regenerateIndividualImagePrompt',\n  input: {schema: z.object({photoDataUri: z.string(), isRealistic: z.boolean(), difficultyDescription: z.string(), userNotes: z.string().optional()})},\n  prompt: `\n    You are a coloring book image generator. Your task is to convert the user's photo into a coloring book page based on the specified style and difficulty.\n    The output should always be a data URI representing a PNG image. The output MUST be a coloring book version of the provided photo. Do NOT change the subject matter.\n\n    Style:\n    {{#if isRealistic}}\n    - Convert the image into a realistic, grayscale coloring book page. The image must be grayscale with no color.\n    - Preserve shading and detail to create an image that looks like a photograph, but is suitable for coloring.\n    {{else}}\n    - Convert the image into a classic coloring book page with only black and white.\n    - The result should be a black and white line drawing with clear, bold outlines and absolutely no color or shading. The image must contain only black lines on a white background.\n    {{/if}}\n\n    Difficulty:\n    - The user has specified the difficulty as '{{difficultyDescription}}'.\n    - Adjust the level of detail in the final image to match this difficulty.\n\n    {{#if userNotes}}\n    User Notes:\n    - The user has provided the following notes to guide the regeneration: \"{{userNotes}}\"\n    - Pay close attention to these notes and incorporate them into your output.\n    {{/if}}\n\n    Photo:\n    {{media url=photoDataUri}}\n  `,\n  model: 'googleai/gemini-2.5-flash-image-preview',\n  config: {\n    responseModalities: ['IMAGE'],\n  },\n});\n\nconst regenerateIndividualImageFlow = ai.defineFlow(\n  {\n    name: 'regenerateIndividualImageFlow',\n    inputSchema: RegenerateIndividualImageInputSchema,\n    outputSchema: RegenerateIndividualImageOutputSchema,\n  },\n  async input => {\n    const isRealistic = input.style === 'realistic';\n    const difficultyMap: Record<number, string> = {\n        1: 'very easy (minimal lines, very simple)',\n        2: 'easy (simple with basic details)',\n        3: 'normal (moderately detailed)',\n        4: 'difficult (highly detailed with intricate lines)',\n        5: 'very difficult (as detailed as possible, capturing every fine line)',\n    };\n    const difficultyDescription = difficultyMap[input.difficulty || 3];\n\n    const result = await regenerateIndividualImagePrompt({ photoDataUri: input.photoDataUri, isRealistic, difficultyDescription, userNotes: input.userNotes });\n    if (!result.media.url) {\n      throw new Error('Image regeneration failed.');\n    }\n    return {regeneratedPhotoDataUri: result.media.url};\n  }\n);\n\n    "],"names":[],"mappings":";;;;;AAGA;;;;;;;CAOC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEF,OAAO,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAY,EAAE,QAAQ,GAAG,OAAO,CAAC,WAAW,QAAQ,CAAC;IAC/E,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,GAAG,OAAO,CAAC,GAAG,QAAQ,CAAC;IACpE,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC9C;AAGA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,yBAAyB,uIAAA,CAAA,IAAC,CACvB,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,kCAAkC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACtD,MAAM;IACN,OAAO;QAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;YAAI,aAAa,uIAAA,CAAA,IAAC,CAAC,OAAO;YAAI,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM;YAAI,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QAAE;IAAE;IACnJ,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBT,CAAC;IACD,OAAO;IACP,QAAQ;QACN,oBAAoB;YAAC;SAAQ;IAC/B;AACF;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,cAAc,MAAM,KAAK,KAAK;IACpC,MAAM,gBAAwC;QAC1C,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;IACP;IACA,MAAM,wBAAwB,aAAa,CAAC,MAAM,UAAU,IAAI,EAAE;IAElE,MAAM,SAAS,MAAM,gCAAgC;QAAE,cAAc,MAAM,YAAY;QAAE;QAAa;QAAuB,WAAW,MAAM,SAAS;IAAC;IACxJ,IAAI,CAAC,OAAO,KAAK,CAAC,GAAG,EAAE;QACrB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;QAAC,yBAAyB,OAAO,KAAK,CAAC,GAAG;IAAA;AACnD;;;IA/DoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///Users/tgrossman/Desktop/FirebaseProject/.next-internal/server/app/create/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateColoringBookImages as '40e8547f6fade59128331142be7b69cfaa29bda156'} from 'ACTIONS_MODULE0'\nexport {regenerateIndividualImage as '4057c2ca89bb0df45295aa83d77d3f31b310c807a2'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["file:///Users/tgrossman/Desktop/FirebaseProject/src/app/create/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/create/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/create/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///Users/tgrossman/Desktop/FirebaseProject/src/app/create/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/create/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/create/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuQ,GACpS,qCACA","debugId":null}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}